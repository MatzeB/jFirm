<project name="jfirm" default="jar" basedir=".">
	<description>jfirm release</description>
	
	<!-- set global properties for this build -->
	<property name="projectname" value="jFirm" />
	<property name="version" value="1.19.1.3" />
	<property name="src" location="${basedir}/src"/>
	<property name="jar" value="jfirm.jar"/>
	<property name="workdir" location="${basedir}/release"/>
	<property name="releasename" value="${projectname}-${version}"/>
	<property name="fullreleasedir" location="${workdir}/${releasename}"/>
	<property name="releasefile" location="${workdir}/${projectname}-${version}.zip"/>
	<property name="releasefile-tgz" location="${workdir}/${projectname}-${version}.tar.gz"/>
	<property name="build" location="${basedir}/classes"/>
	<property name="lib" location="${basedir}/lib"/>
	<property name="make.exe" value="make"/>
	<property name="bfmain" value="example.BrainFuck.Main"/>
	<path id="project.classpath">
		<pathelement location="${basedir}/lib/jna.jar"/>
	</path>

	<target name="init">
		<mkdir dir="${build}"/>
		<available property="libfirm.exists" file="${basedir}/../libfirm"/>
	</target>

	<target name="build" depends="init">
		<javac destdir="${build}" source="1.6" target="1.6" debug="on" includeantruntime="false">
			<src path="${src}"/>
			<classpath refid="project.classpath"/>
		</javac>
	</target>

	<target name="jar" depends="build, libfirm.so">
		<jar jarfile="${build}/${jar}">
			<fileset dir="${build}" excludes="${jar},examples/**"/>
		</jar>
	</target>

	<target name="libfirm.so" depends="init" if="libfirm.exists">
		<exec executable="${make.exe}" failonerror="true" dir="${basedir}/../libfirm">
			<arg value="-j2"/>
		</exec>
		<copy todir="${lib}" flatten="true">
			<fileset dir="${basedir}/../libfirm">
				<include name="build/debug/libfirm.so"/>
			</fileset>
		</copy>
	</target>

	<target name="clean-libfirm.so">
		<exec executable="${make.exe}" failonerror="true" dir="${basedir}/../libfirm">
			<arg value="clean"/>
		</exec>
	</target>
	
	<target name="clean" description="clean up" depends="clean-libfirm.so">
		<delete dir="${build}"/>
		<delete dir="${fullreleasedir}"/>
	</target>

	<target name="complete_clean" description="clean up complete" depends="clean" >
		<delete dir="${workdir}"/>
	</target>

	<target name="zip" depends="copy_stuff" description="pack everything to a zip file">
		<zip destfile="${releasefile}">
			<fileset dir="${workdir}">
				<filename name="${releasename}/**/*" />
			</fileset>
		</zip>
	</target>

	<target name="tar" depends="copy_stuff" description="pack everything to a tgz file">
		<tar destfile="${releasefile-tgz}" compression="gzip">
			<fileset dir="${workdir}">
				<filename name="${releasename}/**/*" />
			</fileset>
		</tar>
	</target>

	<target name="create_dirs">
		<mkdir dir="${workdir}"/>
		<mkdir dir="${fullreleasedir}"/>
	</target>

	<target name="copy_stuff" depends="create_dirs">
		<copy todir="${fullreleasedir}">
			<fileset dir=".">
				<or>
					<filename name="README"/>
					<filename name="README.OSX"/>
					<filename name="NEWS"/>
					<filename name="build.xml"/>
					<filename name="bf_examples/*.bf"/>
					<filename name="lib/jna.jar"/>
					<filename name="lib/libfirm.so"/>
					<filename name="lib/libfirm.dylib"/>
					<filename name="lib/firm.dll"/>
					<filename name="lib/64/libfirm.so"/>
					<filename name="lib/64/libfirm.dylib"/>
					<filename name="src/**/*" />
				</or>
			</fileset>
		</copy>
	</target>

	<target name="beertest" depends="build">
		<java classname="${bfmain}">
			<arg value="bf_examples/bockbeer.bf"/>
			<jvmarg value="-ea"/>
			<sysproperty key="jna.library.path" value="${lib}"/>
			<classpath>
				<path refid="project.classpath"/>
				<dirset dir="${build}"/>
			</classpath>
		</java>
	</target>

</project>
